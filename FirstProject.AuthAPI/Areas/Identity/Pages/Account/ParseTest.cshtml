@page
@model FirstProject.AuthAPI.Areas.Identity.Pages.Account.ParseTestModel
@{
}

<h1>Async Page</h1>

<button type="button" class="btn btn-primary" onclick="startAsync()">Parse</button>
<button type="button" class="btn btn-secondary" id="cancelButton" disabled onclick="cancelAsync()">Cancel</button>
<br />
<br />

<div id="progressBar" class="progress">
    <div id="progressBarInner" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
</div>

@section scripts {
    <script>
        var cancellationTokenSource = null;

        function startAsync() {
            var progressBar = document.getElementById("progressBarInner");
            progressBar.style.width = "0%";
            progressBar.setAttribute("aria-valuenow", "0");

            var cancelButton = document.getElementById("cancelButton");
            cancelButton.disabled = false;

            cancellationTokenSource = new AbortController();
            var cancellationToken = cancellationTokenSource.signal;

            fetch("/ParseTest?handler=ParseAsync", {
                method: "POST",
                signal: cancellationToken
            })
                .then(response => response.json())
                .then(result => {
                    cancelButton.disabled = true;
                    console.log(result);
                })
                .catch(error => {
                    cancelButton.disabled = true;
                    console.log(error);
                });

            var intervalId = setInterval(function () {
                fetch("/ParseTest?handler=GetProgress", {
                    method: "GET"
                })
                    .then(response => response.json())
                    .then(progress => {
                        progressBar.style.width = progress.percentComplete + "%";
                        progressBar.setAttribute("aria-valuenow", progress.percentComplete);
                    })
                    .catch(error => console.log(error));
            }, 1000);
        }

        function cancelAsync() {
            cancellationTokenSource.abort();
        }
    </script>
}